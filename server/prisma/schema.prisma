datasource mongo {
  provider = "mongodb"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  createdAt DateTime @default(now())
  firstName String?
  id        String   @id @default(auto()) @map("_id") @mongo.ObjectId
  lastName  String?
  password  String
  roles     Json
  stafs     Staf[]
  updatedAt DateTime @updatedAt
  username  String   @unique
}

model School {
  activeSuscription      Subscription?             @relation(name: "activeSuscription", fields: [activeSuscriptionId], references: [id])
  activeSuscriptionId    String?                   @unique
  createdAt              DateTime                  @default(now())
  id                     String                    @id @default(auto()) @map("_id") @mongo.ObjectId
  name                   String?                   @unique
  roles                  Role[]                    @relation(fields: [rolesIds], references: [id])
  rolesIds               String[]                  @mongo.ObjectId
  schoolDistrict         EnumSchoolSchoolDistrict?
  stafs                  Staf[]                    @relation(fields: [stafsIds], references: [id])
  stafsIds               String[]                  @mongo.ObjectId
  state                  EnumSchoolState
  SubscriptionHistory    Subscription[]            @relation(name: "SubscriptionHistory", fields: [SubscriptionHistoryIds], references: [id])
  SubscriptionHistoryIds String[]                  @mongo.ObjectId
  township               EnumSchoolTownship
  updatedAt              DateTime                  @updatedAt
}

model Subscription {
  amount                    Float
  configurableModules       ConfigurableModule[]    @relation(fields: [configurableModulesIds], references: [id])
  configurableModulesIds    String[]                @mongo.ObjectId
  createdAt                 DateTime                @default(now())
  id                        String                  @id @default(auto()) @map("_id") @mongo.ObjectId
  isStanderd                Boolean
  name                      String                  @unique
  period                    EnumSubscriptionPeriod?
  schools                   School[]                @relation(name: "SubscriptionHistory", fields: [schoolsIds], references: [id])
  schoolsIds                String[]                @mongo.ObjectId
  schoolSubscriptionHistory School?                 @relation(name: "activeSuscription")
  updatedAt                 DateTime                @updatedAt
}

model ConfigurableModule {
  createdAt                     DateTime       @default(now())
  description                   String?
  id                            String         @id @default(auto()) @map("_id") @mongo.ObjectId
  name                          String         @unique
  subscriptionsConfigModules    Subscription[] @relation(fields: [subscriptionsConfigModulesIds], references: [id])
  subscriptionsConfigModulesIds String[]       @mongo.ObjectId
  updatedAt                     DateTime       @updatedAt
}

model Staf {
  createdAt DateTime @default(now())
  id        String   @id @default(auto()) @map("_id") @mongo.ObjectId
  school    School[] @relation(fields: [schoolIds], references: [id])
  schoolIds String[] @mongo.ObjectId
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model Role {
  createdAt   DateTime     @default(now())
  id          String       @id @default(auto()) @map("_id") @mongo.ObjectId
  name        String?
  permissions Permission[]
  school      School[]     @relation(fields: [schoolIds], references: [id])
  schoolIds   String[]     @mongo.ObjectId
  updatedAt   DateTime     @updatedAt
}

model Permission {
  createdAt   DateTime @default(now())
  description String?
  id          String   @id @default(auto()) @map("_id") @mongo.ObjectId
  name        String?  @unique
  role        Role?    @relation(fields: [roleId], references: [id])
  roleId      String?
  updatedAt   DateTime @updatedAt
}

enum EnumSchoolSchoolDistrict {
  A
}

enum EnumSchoolState {
  Sate_1
  State_2
}

enum EnumSchoolTownship {
  T1
  T2
}

enum EnumSubscriptionPeriod {
  Monthly
  Yearly
}
