datasource mongo {
  provider = "mongodb"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  createdAt     DateTime          @default(now())
  email         String?
  fullName      String?
  id            String            @id @default(auto()) @map("_id") @mongo.ObjectId
  language      EnumUserLanguage?
  parents       Parent[]
  password      String
  profilePicUrl String?
  roles         Json
  stafs         Staf[]
  students      Student[]
  updatedAt     DateTime          @updatedAt
  username      String            @unique
}

model School {
  activeSuscription      Subscription?      @relation(name: "activeSuscription", fields: [activeSuscriptionId], references: [id])
  activeSuscriptionId    String?            @unique
  chartVists             ChartVist[]
  createdAt              DateTime           @default(now())
  id                     String             @id @default(auto()) @map("_id") @mongo.ObjectId
  name                   String?            @unique
  parent                 Parent?            @relation(fields: [parentId], references: [id])
  parentId               String?
  roles                  Role[]             @relation(fields: [rolesIds], references: [id])
  rolesIds               String[]           @mongo.ObjectId
  schoolDistrict         SchoolDistrict?    @relation(fields: [schoolDistrictId], references: [id])
  schoolDistrictId       String?
  stafs                  Staf[]             @relation(fields: [stafsIds], references: [id])
  stafsIds               String[]           @mongo.ObjectId
  state                  EnumSchoolState
  students               Student[]
  SubscriptionHistory    Subscription[]     @relation(name: "SubscriptionHistory", fields: [SubscriptionHistoryIds], references: [id])
  SubscriptionHistoryIds String[]           @mongo.ObjectId
  township               EnumSchoolTownship
  updatedAt              DateTime           @updatedAt
}

model Subscription {
  amount                    Float
  configurableModules       ConfigurableModule[]    @relation(fields: [configurableModulesIds], references: [id])
  configurableModulesIds    String[]                @mongo.ObjectId
  createdAt                 DateTime                @default(now())
  id                        String                  @id @default(auto()) @map("_id") @mongo.ObjectId
  isStanderd                Boolean
  name                      String                  @unique
  period                    EnumSubscriptionPeriod?
  schools                   School[]                @relation(name: "SubscriptionHistory", fields: [schoolsIds], references: [id])
  schoolsIds                String[]                @mongo.ObjectId
  schoolSubscriptionHistory School?                 @relation(name: "activeSuscription")
  subscriptionPlans         SubscriptionPlan[]      @relation(fields: [subscriptionPlansIds], references: [id])
  subscriptionPlansIds      String[]                @mongo.ObjectId
  updatedAt                 DateTime                @updatedAt
}

model ConfigurableModule {
  createdAt                     DateTime       @default(now())
  description                   String?
  id                            String         @id @default(auto()) @map("_id") @mongo.ObjectId
  name                          String         @unique
  subscriptionsConfigModules    Subscription[] @relation(fields: [subscriptionsConfigModulesIds], references: [id])
  subscriptionsConfigModulesIds String[]       @mongo.ObjectId
  updatedAt                     DateTime       @updatedAt
}

model Staf {
  chartVists        ChartVist[]
  createdAt         DateTime        @default(now())
  id                String          @id @default(auto()) @map("_id") @mongo.ObjectId
  school            School[]        @relation(fields: [schoolIds], references: [id])
  schoolIds         String[]        @mongo.ObjectId
  schoolDistricts   SchoolDistrict? @relation(fields: [schoolDistrictsId], references: [id])
  schoolDistrictsId String?
  updatedAt         DateTime        @updatedAt
  user              User            @relation(fields: [userId], references: [id])
  userId            String          @unique
}

model Role {
  createdAt   DateTime     @default(now())
  id          String       @id @default(auto()) @map("_id") @mongo.ObjectId
  name        String?
  permissions Permission[]
  school      School[]     @relation(fields: [schoolIds], references: [id])
  schoolIds   String[]     @mongo.ObjectId
  updatedAt   DateTime     @updatedAt
}

model Permission {
  createdAt   DateTime @default(now())
  description String?
  id          String   @id @default(auto()) @map("_id") @mongo.ObjectId
  name        String?  @unique
  role        Role?    @relation(fields: [roleId], references: [id])
  roleId      String?
  updatedAt   DateTime @updatedAt
}

model Student {
  address    String?
  approvals  Approval[]
  chartVists ChartVist[]
  createdAt  DateTime           @default(now())
  id         String             @id @default(auto()) @map("_id") @mongo.ObjectId
  name       String
  parent     Parent[]           @relation(fields: [parentIds], references: [id])
  parentIds  String[]           @mongo.ObjectId
  records    Treatment[]
  school     School             @relation(fields: [schoolId], references: [id])
  schoolId   String
  status     EnumStudentStatus?
  studentId  String?
  updatedAt  DateTime           @updatedAt
  user       User               @relation(fields: [userId], references: [id])
  userId     String
}

model Treatment {
  approval          Approval?  @relation(fields: [approvalId], references: [id])
  approvalId        String?    @unique
  chartVist         ChartVist? @relation(fields: [chartVistId], references: [id])
  chartVistId       String?
  createdAt         DateTime   @default(now())
  generalDetails    Json
  id                String     @id @default(auto()) @map("_id") @mongo.ObjectId
  medicationDetails Json?
  student           Student?   @relation(fields: [studentId], references: [id])
  studentId         String?
  timingDetails     Json?
  treatmentDetails  Json
  updatedAt         DateTime   @updatedAt
}

model Parent {
  approvals    Approval[] @relation(fields: [approvalsIds], references: [id])
  approvalsIds String[]   @mongo.ObjectId
  createdAt    DateTime   @default(now())
  id           String     @id @default(auto()) @map("_id") @mongo.ObjectId
  name         String
  schools      School[]
  students     Student[]  @relation(fields: [studentsIds], references: [id])
  studentsIds  String[]   @mongo.ObjectId
  updatedAt    DateTime   @updatedAt
  user         User?      @relation(fields: [userId], references: [id])
  userId       String?
}

model SchoolDistrict {
  createdAt DateTime @default(now())
  id        String   @id @default(auto()) @map("_id") @mongo.ObjectId
  name      String
  schools   School[]
  stafs     Staf[]
  updatedAt DateTime @updatedAt
}

model Approval {
  approvedBy          Parent[]   @relation(fields: [approvedByIds], references: [id])
  approvedByIds       String[]   @mongo.ObjectId
  authorisationLetter String?
  createdAt           DateTime   @default(now())
  description         String?
  id                  String     @id @default(auto()) @map("_id") @mongo.ObjectId
  record              Treatment?
  student             Student?   @relation(fields: [studentId], references: [id])
  studentId           String?
  updatedAt           DateTime   @updatedAt
}

model ChartVist {
  chartType  EnumChartVistChartType
  createdAt  DateTime               @default(now())
  endTime    String?
  id         String                 @id @default(auto()) @map("_id") @mongo.ObjectId
  school     School?                @relation(fields: [schoolId], references: [id])
  schoolId   String?
  staf       Staf?                  @relation(fields: [stafId], references: [id])
  stafId     String?
  startTime  DateTime?
  student    Student?               @relation(fields: [studentId], references: [id])
  studentId  String?
  treatments Treatment[]
  updatedAt  DateTime               @updatedAt
}

model SubscriptionPlan {
  createdAt        DateTime       @default(now())
  id               String         @id @default(auto()) @map("_id") @mongo.ObjectId
  subscriptions    Subscription[] @relation(fields: [subscriptionsIds], references: [id])
  subscriptionsIds String[]       @mongo.ObjectId
  updatedAt        DateTime       @updatedAt
}

enum EnumUserLanguage {
  English
}

enum EnumSchoolState {
  Sate_1
  State_2
}

enum EnumSchoolTownship {
  T1
  T2
}

enum EnumSubscriptionPeriod {
  Monthly
  Yearly
}

enum EnumStudentStatus {
  Active
  Deactivate
  Pending
}

enum EnumChartVistChartType {
  Type_1
  Type_2
}
