/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateTreatmentArgs } from "./CreateTreatmentArgs";
import { UpdateTreatmentArgs } from "./UpdateTreatmentArgs";
import { DeleteTreatmentArgs } from "./DeleteTreatmentArgs";
import { TreatmentFindManyArgs } from "./TreatmentFindManyArgs";
import { TreatmentFindUniqueArgs } from "./TreatmentFindUniqueArgs";
import { Treatment } from "./Treatment";
import { Approval } from "../../approval/base/Approval";
import { ChartVist } from "../../chartVist/base/ChartVist";
import { Student } from "../../student/base/Student";
import { TreatmentService } from "../treatment.service";

@graphql.Resolver(() => Treatment)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class TreatmentResolverBase {
  constructor(
    protected readonly service: TreatmentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Treatment",
    action: "read",
    possession: "any",
  })
  async _treatmentsMeta(
    @graphql.Args() args: TreatmentFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Treatment])
  @nestAccessControl.UseRoles({
    resource: "Treatment",
    action: "read",
    possession: "any",
  })
  async treatments(
    @graphql.Args() args: TreatmentFindManyArgs
  ): Promise<Treatment[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Treatment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Treatment",
    action: "read",
    possession: "own",
  })
  async treatment(
    @graphql.Args() args: TreatmentFindUniqueArgs
  ): Promise<Treatment | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Treatment)
  @nestAccessControl.UseRoles({
    resource: "Treatment",
    action: "create",
    possession: "any",
  })
  async createTreatment(
    @graphql.Args() args: CreateTreatmentArgs
  ): Promise<Treatment> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        approval: args.data.approval
          ? {
              connect: args.data.approval,
            }
          : undefined,

        chartVist: args.data.chartVist
          ? {
              connect: args.data.chartVist,
            }
          : undefined,

        student: args.data.student
          ? {
              connect: args.data.student,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Treatment)
  @nestAccessControl.UseRoles({
    resource: "Treatment",
    action: "update",
    possession: "any",
  })
  async updateTreatment(
    @graphql.Args() args: UpdateTreatmentArgs
  ): Promise<Treatment | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          approval: args.data.approval
            ? {
                connect: args.data.approval,
              }
            : undefined,

          chartVist: args.data.chartVist
            ? {
                connect: args.data.chartVist,
              }
            : undefined,

          student: args.data.student
            ? {
                connect: args.data.student,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Treatment)
  @nestAccessControl.UseRoles({
    resource: "Treatment",
    action: "delete",
    possession: "any",
  })
  async deleteTreatment(
    @graphql.Args() args: DeleteTreatmentArgs
  ): Promise<Treatment | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Approval, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Approval",
    action: "read",
    possession: "any",
  })
  async approval(
    @graphql.Parent() parent: Treatment
  ): Promise<Approval | null> {
    const result = await this.service.getApproval(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ChartVist, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ChartVist",
    action: "read",
    possession: "any",
  })
  async chartVist(
    @graphql.Parent() parent: Treatment
  ): Promise<ChartVist | null> {
    const result = await this.service.getChartVist(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Student, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "read",
    possession: "any",
  })
  async student(@graphql.Parent() parent: Treatment): Promise<Student | null> {
    const result = await this.service.getStudent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
