/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { EnumChartVistChartType } from "./EnumChartVistChartType";
import {
  IsEnum,
  IsDate,
  IsString,
  IsOptional,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { MedicalRecord } from "../../medicalRecord/base/MedicalRecord";
import { School } from "../../school/base/School";
import { Staf } from "../../staf/base/Staf";
import { Student } from "../../student/base/Student";

@ObjectType()
class ChartVist {
  @ApiProperty({
    required: true,
    enum: EnumChartVistChartType,
  })
  @IsEnum(EnumChartVistChartType)
  @Field(() => EnumChartVistChartType, {
    nullable: true,
  })
  chartType?: "Type_1" | "Type_2";

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  endTime!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => [MedicalRecord],
  })
  @ValidateNested()
  @Type(() => MedicalRecord)
  @IsOptional()
  MedicalRecord?: Array<MedicalRecord>;

  @ApiProperty({
    required: false,
    type: () => School,
  })
  @ValidateNested()
  @Type(() => School)
  @IsOptional()
  school?: School | null;

  @ApiProperty({
    required: false,
    type: () => Staf,
  })
  @ValidateNested()
  @Type(() => Staf)
  @IsOptional()
  staf?: Staf | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  startTime!: Date | null;

  @ApiProperty({
    required: false,
    type: () => Student,
  })
  @ValidateNested()
  @Type(() => Student)
  @IsOptional()
  student?: Student | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { ChartVist };
