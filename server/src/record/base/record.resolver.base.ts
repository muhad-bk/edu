/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateRecordArgs } from "./CreateRecordArgs";
import { UpdateRecordArgs } from "./UpdateRecordArgs";
import { DeleteRecordArgs } from "./DeleteRecordArgs";
import { RecordFindManyArgs } from "./RecordFindManyArgs";
import { RecordFindUniqueArgs } from "./RecordFindUniqueArgs";
import { Record } from "./Record";
import { Student } from "../../student/base/Student";
import { RecordService } from "../record.service";

@graphql.Resolver(() => Record)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class RecordResolverBase {
  constructor(
    protected readonly service: RecordService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Record",
    action: "read",
    possession: "any",
  })
  async _recordsMeta(
    @graphql.Args() args: RecordFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Record])
  @nestAccessControl.UseRoles({
    resource: "Record",
    action: "read",
    possession: "any",
  })
  async records(@graphql.Args() args: RecordFindManyArgs): Promise<Record[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Record, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Record",
    action: "read",
    possession: "own",
  })
  async record(
    @graphql.Args() args: RecordFindUniqueArgs
  ): Promise<Record | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Record)
  @nestAccessControl.UseRoles({
    resource: "Record",
    action: "create",
    possession: "any",
  })
  async createRecord(@graphql.Args() args: CreateRecordArgs): Promise<Record> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        student: args.data.student
          ? {
              connect: args.data.student,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Record)
  @nestAccessControl.UseRoles({
    resource: "Record",
    action: "update",
    possession: "any",
  })
  async updateRecord(
    @graphql.Args() args: UpdateRecordArgs
  ): Promise<Record | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          student: args.data.student
            ? {
                connect: args.data.student,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Record)
  @nestAccessControl.UseRoles({
    resource: "Record",
    action: "delete",
    possession: "any",
  })
  async deleteRecord(
    @graphql.Args() args: DeleteRecordArgs
  ): Promise<Record | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Student, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "read",
    possession: "any",
  })
  async student(@graphql.Parent() parent: Record): Promise<Student | null> {
    const result = await this.service.getStudent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
