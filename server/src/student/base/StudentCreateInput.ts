/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsOptional,
  ValidateNested,
  IsJSON,
  IsEnum,
} from "class-validator";
import { ApprovalCreateNestedManyWithoutStudentsInput } from "./ApprovalCreateNestedManyWithoutStudentsInput";
import { Type } from "class-transformer";
import { ChartVistCreateNestedManyWithoutStudentsInput } from "./ChartVistCreateNestedManyWithoutStudentsInput";
import { GraphQLJSON } from "graphql-type-json";
import { InputJsonValue } from "../../types";
import { ParentCreateNestedManyWithoutStudentsInput } from "./ParentCreateNestedManyWithoutStudentsInput";
import { MedicalRecordCreateNestedManyWithoutStudentsInput } from "./MedicalRecordCreateNestedManyWithoutStudentsInput";
import { SchoolWhereUniqueInput } from "../../school/base/SchoolWhereUniqueInput";
import { EnumStudentStatus } from "./EnumStudentStatus";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

@InputType()
class StudentCreateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  address?: string | null;

  @ApiProperty({
    required: false,
    type: () => ApprovalCreateNestedManyWithoutStudentsInput,
  })
  @ValidateNested()
  @Type(() => ApprovalCreateNestedManyWithoutStudentsInput)
  @IsOptional()
  @Field(() => ApprovalCreateNestedManyWithoutStudentsInput, {
    nullable: true,
  })
  approvals?: ApprovalCreateNestedManyWithoutStudentsInput;

  @ApiProperty({
    required: false,
    type: () => ChartVistCreateNestedManyWithoutStudentsInput,
  })
  @ValidateNested()
  @Type(() => ChartVistCreateNestedManyWithoutStudentsInput)
  @IsOptional()
  @Field(() => ChartVistCreateNestedManyWithoutStudentsInput, {
    nullable: true,
  })
  chartVists?: ChartVistCreateNestedManyWithoutStudentsInput;

  @ApiProperty({
    required: false,
  })
  @IsJSON()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  contactDetails?: InputJsonValue;

  @ApiProperty({
    required: false,
  })
  @IsJSON()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  generalDetails?: InputJsonValue;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: false,
    type: () => ParentCreateNestedManyWithoutStudentsInput,
  })
  @ValidateNested()
  @Type(() => ParentCreateNestedManyWithoutStudentsInput)
  @IsOptional()
  @Field(() => ParentCreateNestedManyWithoutStudentsInput, {
    nullable: true,
  })
  parent?: ParentCreateNestedManyWithoutStudentsInput;

  @ApiProperty({
    required: false,
    type: () => MedicalRecordCreateNestedManyWithoutStudentsInput,
  })
  @ValidateNested()
  @Type(() => MedicalRecordCreateNestedManyWithoutStudentsInput)
  @IsOptional()
  @Field(() => MedicalRecordCreateNestedManyWithoutStudentsInput, {
    nullable: true,
  })
  records?: MedicalRecordCreateNestedManyWithoutStudentsInput;

  @ApiProperty({
    required: true,
    type: () => SchoolWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => SchoolWhereUniqueInput)
  @Field(() => SchoolWhereUniqueInput)
  school!: SchoolWhereUniqueInput;

  @ApiProperty({
    required: false,
    enum: EnumStudentStatus,
  })
  @IsEnum(EnumStudentStatus)
  @IsOptional()
  @Field(() => EnumStudentStatus, {
    nullable: true,
  })
  status?: "Active" | "Deactivate" | "Pending" | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  studentId?: string | null;

  @ApiProperty({
    required: true,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @Field(() => UserWhereUniqueInput)
  user!: UserWhereUniqueInput;
}

export { StudentCreateInput };
