/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { IsString, IsOptional, ValidateNested, IsEnum } from "class-validator";
import { ApprovalUpdateManyWithoutStudentsInput } from "./ApprovalUpdateManyWithoutStudentsInput";
import { Type } from "class-transformer";
import { ChartVistUpdateManyWithoutStudentsInput } from "./ChartVistUpdateManyWithoutStudentsInput";
import { ParentUpdateManyWithoutStudentsInput } from "./ParentUpdateManyWithoutStudentsInput";
import { TreatmentUpdateManyWithoutStudentsInput } from "./TreatmentUpdateManyWithoutStudentsInput";
import { SchoolWhereUniqueInput } from "../../school/base/SchoolWhereUniqueInput";
import { EnumStudentStatus } from "./EnumStudentStatus";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

@InputType()
class StudentUpdateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  address?: string | null;

  @ApiProperty({
    required: false,
    type: () => ApprovalUpdateManyWithoutStudentsInput,
  })
  @ValidateNested()
  @Type(() => ApprovalUpdateManyWithoutStudentsInput)
  @IsOptional()
  @Field(() => ApprovalUpdateManyWithoutStudentsInput, {
    nullable: true,
  })
  approvals?: ApprovalUpdateManyWithoutStudentsInput;

  @ApiProperty({
    required: false,
    type: () => ChartVistUpdateManyWithoutStudentsInput,
  })
  @ValidateNested()
  @Type(() => ChartVistUpdateManyWithoutStudentsInput)
  @IsOptional()
  @Field(() => ChartVistUpdateManyWithoutStudentsInput, {
    nullable: true,
  })
  chartVists?: ChartVistUpdateManyWithoutStudentsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name?: string;

  @ApiProperty({
    required: false,
    type: () => ParentUpdateManyWithoutStudentsInput,
  })
  @ValidateNested()
  @Type(() => ParentUpdateManyWithoutStudentsInput)
  @IsOptional()
  @Field(() => ParentUpdateManyWithoutStudentsInput, {
    nullable: true,
  })
  parent?: ParentUpdateManyWithoutStudentsInput;

  @ApiProperty({
    required: false,
    type: () => TreatmentUpdateManyWithoutStudentsInput,
  })
  @ValidateNested()
  @Type(() => TreatmentUpdateManyWithoutStudentsInput)
  @IsOptional()
  @Field(() => TreatmentUpdateManyWithoutStudentsInput, {
    nullable: true,
  })
  records?: TreatmentUpdateManyWithoutStudentsInput;

  @ApiProperty({
    required: false,
    type: () => SchoolWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => SchoolWhereUniqueInput)
  @IsOptional()
  @Field(() => SchoolWhereUniqueInput, {
    nullable: true,
  })
  school?: SchoolWhereUniqueInput;

  @ApiProperty({
    required: false,
    enum: EnumStudentStatus,
  })
  @IsEnum(EnumStudentStatus)
  @IsOptional()
  @Field(() => EnumStudentStatus, {
    nullable: true,
  })
  status?: "Active" | "Deactivate" | "Pending" | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  studentId?: string | null;

  @ApiProperty({
    required: false,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @IsOptional()
  @Field(() => UserWhereUniqueInput, {
    nullable: true,
  })
  user?: UserWhereUniqueInput;
}

export { StudentUpdateInput };
