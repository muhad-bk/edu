/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsNumber,
  IsBoolean,
  IsString,
  IsEnum,
  IsOptional,
  ValidateNested,
} from "class-validator";
import { EnumSubscriptionPeriod } from "./EnumSubscriptionPeriod";
import { SchoolCreateNestedManyWithoutSubscriptionsInput } from "./SchoolCreateNestedManyWithoutSubscriptionsInput";
import { Type } from "class-transformer";
import { SchoolWhereUniqueInput } from "../../school/base/SchoolWhereUniqueInput";

@InputType()
class SubscriptionCreateInput {
  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Number)
  amount!: number;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  isStanderd!: boolean;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: false,
    enum: EnumSubscriptionPeriod,
  })
  @IsEnum(EnumSubscriptionPeriod)
  @IsOptional()
  @Field(() => EnumSubscriptionPeriod, {
    nullable: true,
  })
  period?: "Monthly" | "Yearly" | null;

  @ApiProperty({
    required: false,
    type: () => SchoolCreateNestedManyWithoutSubscriptionsInput,
  })
  @ValidateNested()
  @Type(() => SchoolCreateNestedManyWithoutSubscriptionsInput)
  @IsOptional()
  @Field(() => SchoolCreateNestedManyWithoutSubscriptionsInput, {
    nullable: true,
  })
  schools?: SchoolCreateNestedManyWithoutSubscriptionsInput;

  @ApiProperty({
    required: false,
    type: () => SchoolWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => SchoolWhereUniqueInput)
  @IsOptional()
  @Field(() => SchoolWhereUniqueInput, {
    nullable: true,
  })
  schoolSubscriptionHistory?: SchoolWhereUniqueInput | null;
}

export { SubscriptionCreateInput };
