/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsNumber,
  ValidateNested,
  IsOptional,
  IsDate,
  IsString,
  IsBoolean,
  IsEnum,
} from "class-validator";
import { ConfigurableModule } from "../../configurableModule/base/ConfigurableModule";
import { Type } from "class-transformer";
import { EnumSubscriptionPeriod } from "./EnumSubscriptionPeriod";
import { SchoolDistrict } from "../../schoolDistrict/base/SchoolDistrict";
import { SubscriptionPlan } from "../../subscriptionPlan/base/SubscriptionPlan";

@ObjectType()
class Subscription {
  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Number)
  amount!: number;

  @ApiProperty({
    required: false,
    type: () => [ConfigurableModule],
  })
  @ValidateNested()
  @Type(() => ConfigurableModule)
  @IsOptional()
  configurableModules?: Array<ConfigurableModule>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  isStanderd!: boolean;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: false,
    enum: EnumSubscriptionPeriod,
  })
  @IsEnum(EnumSubscriptionPeriod)
  @IsOptional()
  @Field(() => EnumSubscriptionPeriod, {
    nullable: true,
  })
  period?: "Monthly" | "Yearly" | null;

  @ApiProperty({
    required: false,
    type: () => [SchoolDistrict],
  })
  @ValidateNested()
  @Type(() => SchoolDistrict)
  @IsOptional()
  schoolDistricts?: Array<SchoolDistrict>;

  @ApiProperty({
    required: false,
    type: () => [SubscriptionPlan],
  })
  @ValidateNested()
  @Type(() => SubscriptionPlan)
  @IsOptional()
  subscriptionPlans?: Array<SubscriptionPlan>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Subscription };
