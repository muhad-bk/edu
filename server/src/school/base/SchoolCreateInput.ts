/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { IsString, IsOptional, ValidateNested, IsEnum } from "class-validator";
import { ChartVistCreateNestedManyWithoutSchoolsInput } from "./ChartVistCreateNestedManyWithoutSchoolsInput";
import { Type } from "class-transformer";
import { ParentWhereUniqueInput } from "../../parent/base/ParentWhereUniqueInput";
import { RoleCreateNestedManyWithoutSchoolsInput } from "./RoleCreateNestedManyWithoutSchoolsInput";
import { SchoolDistrictWhereUniqueInput } from "../../schoolDistrict/base/SchoolDistrictWhereUniqueInput";
import { StafCreateNestedManyWithoutSchoolsInput } from "./StafCreateNestedManyWithoutSchoolsInput";
import { EnumSchoolState } from "./EnumSchoolState";
import { EnumSchoolStatus } from "./EnumSchoolStatus";
import { StudentCreateNestedManyWithoutSchoolsInput } from "./StudentCreateNestedManyWithoutSchoolsInput";
import { EnumSchoolTownship } from "./EnumSchoolTownship";

@InputType()
class SchoolCreateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  abbreviation?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  address?: string | null;

  @ApiProperty({
    required: false,
    type: () => ChartVistCreateNestedManyWithoutSchoolsInput,
  })
  @ValidateNested()
  @Type(() => ChartVistCreateNestedManyWithoutSchoolsInput)
  @IsOptional()
  @Field(() => ChartVistCreateNestedManyWithoutSchoolsInput, {
    nullable: true,
  })
  chartVists?: ChartVistCreateNestedManyWithoutSchoolsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  logoUrl?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name?: string | null;

  @ApiProperty({
    required: false,
    type: () => ParentWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ParentWhereUniqueInput)
  @IsOptional()
  @Field(() => ParentWhereUniqueInput, {
    nullable: true,
  })
  parent?: ParentWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => RoleCreateNestedManyWithoutSchoolsInput,
  })
  @ValidateNested()
  @Type(() => RoleCreateNestedManyWithoutSchoolsInput)
  @IsOptional()
  @Field(() => RoleCreateNestedManyWithoutSchoolsInput, {
    nullable: true,
  })
  roles?: RoleCreateNestedManyWithoutSchoolsInput;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  schoolCode!: string;

  @ApiProperty({
    required: false,
    type: () => SchoolDistrictWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => SchoolDistrictWhereUniqueInput)
  @IsOptional()
  @Field(() => SchoolDistrictWhereUniqueInput, {
    nullable: true,
  })
  schoolDistrict?: SchoolDistrictWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => StafCreateNestedManyWithoutSchoolsInput,
  })
  @ValidateNested()
  @Type(() => StafCreateNestedManyWithoutSchoolsInput)
  @IsOptional()
  @Field(() => StafCreateNestedManyWithoutSchoolsInput, {
    nullable: true,
  })
  stafs?: StafCreateNestedManyWithoutSchoolsInput;

  @ApiProperty({
    required: true,
    enum: EnumSchoolState,
  })
  @IsEnum(EnumSchoolState)
  @Field(() => EnumSchoolState)
  state!: "Sate_1" | "State_2";

  @ApiProperty({
    required: false,
    enum: EnumSchoolStatus,
  })
  @IsEnum(EnumSchoolStatus)
  @IsOptional()
  @Field(() => EnumSchoolStatus, {
    nullable: true,
  })
  status?: "Active" | "Deactivate" | "Pending" | null;

  @ApiProperty({
    required: false,
    type: () => StudentCreateNestedManyWithoutSchoolsInput,
  })
  @ValidateNested()
  @Type(() => StudentCreateNestedManyWithoutSchoolsInput)
  @IsOptional()
  @Field(() => StudentCreateNestedManyWithoutSchoolsInput, {
    nullable: true,
  })
  students?: StudentCreateNestedManyWithoutSchoolsInput;

  @ApiProperty({
    required: true,
    enum: EnumSchoolTownship,
  })
  @IsEnum(EnumSchoolTownship)
  @Field(() => EnumSchoolTownship)
  township!: "T1" | "T2";
}

export { SchoolCreateInput };
