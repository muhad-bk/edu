/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { Type } from "class-transformer";
import { IsOptional, ValidateNested, IsEnum } from "class-validator";
import { ChartVistListRelationFilter } from "../../chartVist/base/ChartVistListRelationFilter";
import { StringFilter } from "../../util/StringFilter";
import { ParentWhereUniqueInput } from "../../parent/base/ParentWhereUniqueInput";
import { RoleListRelationFilter } from "../../role/base/RoleListRelationFilter";
import { SchoolDistrictWhereUniqueInput } from "../../schoolDistrict/base/SchoolDistrictWhereUniqueInput";
import { StafListRelationFilter } from "../../staf/base/StafListRelationFilter";
import { EnumSchoolState } from "./EnumSchoolState";
import { EnumSchoolStatus } from "./EnumSchoolStatus";
import { StudentListRelationFilter } from "../../student/base/StudentListRelationFilter";
import { EnumSchoolTownship } from "./EnumSchoolTownship";

@InputType()
class SchoolWhereInput {
  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  abbreviation?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  address?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => ChartVistListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ChartVistListRelationFilter)
  @IsOptional()
  @Field(() => ChartVistListRelationFilter, {
    nullable: true,
  })
  chartVists?: ChartVistListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  logoUrl?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  name?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => ParentWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ParentWhereUniqueInput)
  @IsOptional()
  @Field(() => ParentWhereUniqueInput, {
    nullable: true,
  })
  parent?: ParentWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => RoleListRelationFilter,
  })
  @ValidateNested()
  @Type(() => RoleListRelationFilter)
  @IsOptional()
  @Field(() => RoleListRelationFilter, {
    nullable: true,
  })
  roles?: RoleListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  schoolCode?: StringFilter;

  @ApiProperty({
    required: false,
    type: () => SchoolDistrictWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => SchoolDistrictWhereUniqueInput)
  @IsOptional()
  @Field(() => SchoolDistrictWhereUniqueInput, {
    nullable: true,
  })
  schoolDistrict?: SchoolDistrictWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => StafListRelationFilter,
  })
  @ValidateNested()
  @Type(() => StafListRelationFilter)
  @IsOptional()
  @Field(() => StafListRelationFilter, {
    nullable: true,
  })
  stafs?: StafListRelationFilter;

  @ApiProperty({
    required: false,
    enum: EnumSchoolState,
  })
  @IsEnum(EnumSchoolState)
  @IsOptional()
  @Field(() => EnumSchoolState, {
    nullable: true,
  })
  state?: "Sate_1" | "State_2";

  @ApiProperty({
    required: false,
    enum: EnumSchoolStatus,
  })
  @IsEnum(EnumSchoolStatus)
  @IsOptional()
  @Field(() => EnumSchoolStatus, {
    nullable: true,
  })
  status?: "Active" | "Deactivate" | "Pending";

  @ApiProperty({
    required: false,
    type: () => StudentListRelationFilter,
  })
  @ValidateNested()
  @Type(() => StudentListRelationFilter)
  @IsOptional()
  @Field(() => StudentListRelationFilter, {
    nullable: true,
  })
  students?: StudentListRelationFilter;

  @ApiProperty({
    required: false,
    enum: EnumSchoolTownship,
  })
  @IsEnum(EnumSchoolTownship)
  @IsOptional()
  @Field(() => EnumSchoolTownship, {
    nullable: true,
  })
  township?: "T1" | "T2";
}

export { SchoolWhereInput };
