/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { IsString, IsOptional, ValidateNested, IsEnum } from "class-validator";
import { ChartVistUpdateManyWithoutSchoolsInput } from "./ChartVistUpdateManyWithoutSchoolsInput";
import { Type } from "class-transformer";
import { ParentWhereUniqueInput } from "../../parent/base/ParentWhereUniqueInput";
import { RoleUpdateManyWithoutSchoolsInput } from "./RoleUpdateManyWithoutSchoolsInput";
import { SchoolDistrictWhereUniqueInput } from "../../schoolDistrict/base/SchoolDistrictWhereUniqueInput";
import { StafUpdateManyWithoutSchoolsInput } from "./StafUpdateManyWithoutSchoolsInput";
import { EnumSchoolState } from "./EnumSchoolState";
import { EnumSchoolStatus } from "./EnumSchoolStatus";
import { StudentUpdateManyWithoutSchoolsInput } from "./StudentUpdateManyWithoutSchoolsInput";
import { EnumSchoolTownship } from "./EnumSchoolTownship";

@InputType()
class SchoolUpdateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  abbreviation?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  address?: string | null;

  @ApiProperty({
    required: false,
    type: () => ChartVistUpdateManyWithoutSchoolsInput,
  })
  @ValidateNested()
  @Type(() => ChartVistUpdateManyWithoutSchoolsInput)
  @IsOptional()
  @Field(() => ChartVistUpdateManyWithoutSchoolsInput, {
    nullable: true,
  })
  chartVists?: ChartVistUpdateManyWithoutSchoolsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  logoUrl?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name?: string | null;

  @ApiProperty({
    required: false,
    type: () => ParentWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ParentWhereUniqueInput)
  @IsOptional()
  @Field(() => ParentWhereUniqueInput, {
    nullable: true,
  })
  parent?: ParentWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => RoleUpdateManyWithoutSchoolsInput,
  })
  @ValidateNested()
  @Type(() => RoleUpdateManyWithoutSchoolsInput)
  @IsOptional()
  @Field(() => RoleUpdateManyWithoutSchoolsInput, {
    nullable: true,
  })
  roles?: RoleUpdateManyWithoutSchoolsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  schoolCode?: string;

  @ApiProperty({
    required: false,
    type: () => SchoolDistrictWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => SchoolDistrictWhereUniqueInput)
  @IsOptional()
  @Field(() => SchoolDistrictWhereUniqueInput, {
    nullable: true,
  })
  schoolDistrict?: SchoolDistrictWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => StafUpdateManyWithoutSchoolsInput,
  })
  @ValidateNested()
  @Type(() => StafUpdateManyWithoutSchoolsInput)
  @IsOptional()
  @Field(() => StafUpdateManyWithoutSchoolsInput, {
    nullable: true,
  })
  stafs?: StafUpdateManyWithoutSchoolsInput;

  @ApiProperty({
    required: false,
    enum: EnumSchoolState,
  })
  @IsEnum(EnumSchoolState)
  @IsOptional()
  @Field(() => EnumSchoolState, {
    nullable: true,
  })
  state?: "Sate_1" | "State_2";

  @ApiProperty({
    required: false,
    enum: EnumSchoolStatus,
  })
  @IsEnum(EnumSchoolStatus)
  @IsOptional()
  @Field(() => EnumSchoolStatus, {
    nullable: true,
  })
  status?: "Active" | "Deactivate" | "Pending" | null;

  @ApiProperty({
    required: false,
    type: () => StudentUpdateManyWithoutSchoolsInput,
  })
  @ValidateNested()
  @Type(() => StudentUpdateManyWithoutSchoolsInput)
  @IsOptional()
  @Field(() => StudentUpdateManyWithoutSchoolsInput, {
    nullable: true,
  })
  students?: StudentUpdateManyWithoutSchoolsInput;

  @ApiProperty({
    required: false,
    enum: EnumSchoolTownship,
  })
  @IsEnum(EnumSchoolTownship)
  @IsOptional()
  @Field(() => EnumSchoolTownship, {
    nullable: true,
  })
  township?: "T1" | "T2";
}

export { SchoolUpdateInput };
