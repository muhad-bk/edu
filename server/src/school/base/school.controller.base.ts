/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SchoolService } from "../school.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SchoolCreateInput } from "./SchoolCreateInput";
import { SchoolWhereInput } from "./SchoolWhereInput";
import { SchoolWhereUniqueInput } from "./SchoolWhereUniqueInput";
import { SchoolFindManyArgs } from "./SchoolFindManyArgs";
import { SchoolUpdateInput } from "./SchoolUpdateInput";
import { School } from "./School";
import { ChartVistFindManyArgs } from "../../chartVist/base/ChartVistFindManyArgs";
import { ChartVist } from "../../chartVist/base/ChartVist";
import { ChartVistWhereUniqueInput } from "../../chartVist/base/ChartVistWhereUniqueInput";
import { RoleFindManyArgs } from "../../role/base/RoleFindManyArgs";
import { Role } from "../../role/base/Role";
import { RoleWhereUniqueInput } from "../../role/base/RoleWhereUniqueInput";
import { StafFindManyArgs } from "../../staf/base/StafFindManyArgs";
import { Staf } from "../../staf/base/Staf";
import { StafWhereUniqueInput } from "../../staf/base/StafWhereUniqueInput";
import { StudentFindManyArgs } from "../../student/base/StudentFindManyArgs";
import { Student } from "../../student/base/Student";
import { StudentWhereUniqueInput } from "../../student/base/StudentWhereUniqueInput";
import { SubscriptionFindManyArgs } from "../../subscription/base/SubscriptionFindManyArgs";
import { Subscription } from "../../subscription/base/Subscription";
import { SubscriptionWhereUniqueInput } from "../../subscription/base/SubscriptionWhereUniqueInput";
@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SchoolControllerBase {
  constructor(
    protected readonly service: SchoolService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "School",
    action: "create",
    possession: "any",
  })
  @common.Post()
  @swagger.ApiCreatedResponse({ type: School })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(@common.Body() data: SchoolCreateInput): Promise<School> {
    return await this.service.create({
      data: {
        ...data,

        activeSuscription: data.activeSuscription
          ? {
              connect: data.activeSuscription,
            }
          : undefined,

        parent: data.parent
          ? {
              connect: data.parent,
            }
          : undefined,

        schoolDistrict: data.schoolDistrict
          ? {
              connect: data.schoolDistrict,
            }
          : undefined,
      },
      select: {
        activeSuscription: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,

        parent: {
          select: {
            id: true,
          },
        },

        schoolDistrict: {
          select: {
            id: true,
          },
        },

        state: true,
        township: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "School",
    action: "read",
    possession: "any",
  })
  @common.Get()
  @swagger.ApiOkResponse({ type: [School] })
  @swagger.ApiForbiddenResponse()
  @ApiNestedQuery(SchoolFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<School[]> {
    const args = plainToClass(SchoolFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        activeSuscription: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,

        parent: {
          select: {
            id: true,
          },
        },

        schoolDistrict: {
          select: {
            id: true,
          },
        },

        state: true,
        township: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "School",
    action: "read",
    possession: "own",
  })
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: School })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: SchoolWhereUniqueInput
  ): Promise<School | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        activeSuscription: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,

        parent: {
          select: {
            id: true,
          },
        },

        schoolDistrict: {
          select: {
            id: true,
          },
        },

        state: true,
        township: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "School",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: School })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: SchoolWhereUniqueInput,
    @common.Body() data: SchoolUpdateInput
  ): Promise<School | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          activeSuscription: data.activeSuscription
            ? {
                connect: data.activeSuscription,
              }
            : undefined,

          parent: data.parent
            ? {
                connect: data.parent,
              }
            : undefined,

          schoolDistrict: data.schoolDistrict
            ? {
                connect: data.schoolDistrict,
              }
            : undefined,
        },
        select: {
          activeSuscription: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          name: true,

          parent: {
            select: {
              id: true,
            },
          },

          schoolDistrict: {
            select: {
              id: true,
            },
          },

          state: true,
          township: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @nestAccessControl.UseRoles({
    resource: "School",
    action: "delete",
    possession: "any",
  })
  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: School })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: SchoolWhereUniqueInput
  ): Promise<School | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          activeSuscription: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          name: true,

          parent: {
            select: {
              id: true,
            },
          },

          schoolDistrict: {
            select: {
              id: true,
            },
          },

          state: true,
          township: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "ChartVist",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/chartVists")
  @ApiNestedQuery(ChartVistFindManyArgs)
  async findManyChartVists(
    @common.Req() request: Request,
    @common.Param() params: SchoolWhereUniqueInput
  ): Promise<ChartVist[]> {
    const query = plainToClass(ChartVistFindManyArgs, request.query);
    const results = await this.service.findChartVists(params.id, {
      ...query,
      select: {
        chartType: true,
        createdAt: true,
        endTime: true,
        id: true,

        school: {
          select: {
            id: true,
          },
        },

        staf: {
          select: {
            id: true,
          },
        },

        startTime: true,

        student: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "School",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/chartVists")
  async connectChartVists(
    @common.Param() params: SchoolWhereUniqueInput,
    @common.Body() body: ChartVistWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chartVists: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "School",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/chartVists")
  async updateChartVists(
    @common.Param() params: SchoolWhereUniqueInput,
    @common.Body() body: ChartVistWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chartVists: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "School",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/chartVists")
  async disconnectChartVists(
    @common.Param() params: SchoolWhereUniqueInput,
    @common.Body() body: ChartVistWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chartVists: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Role",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/roles")
  @ApiNestedQuery(RoleFindManyArgs)
  async findManyRoles(
    @common.Req() request: Request,
    @common.Param() params: SchoolWhereUniqueInput
  ): Promise<Role[]> {
    const query = plainToClass(RoleFindManyArgs, request.query);
    const results = await this.service.findRoles(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "School",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/roles")
  async connectRoles(
    @common.Param() params: SchoolWhereUniqueInput,
    @common.Body() body: RoleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      roles: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "School",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/roles")
  async updateRoles(
    @common.Param() params: SchoolWhereUniqueInput,
    @common.Body() body: RoleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      roles: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "School",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/roles")
  async disconnectRoles(
    @common.Param() params: SchoolWhereUniqueInput,
    @common.Body() body: RoleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      roles: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Staf",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/stafs")
  @ApiNestedQuery(StafFindManyArgs)
  async findManyStafs(
    @common.Req() request: Request,
    @common.Param() params: SchoolWhereUniqueInput
  ): Promise<Staf[]> {
    const query = plainToClass(StafFindManyArgs, request.query);
    const results = await this.service.findStafs(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        schoolDistricts: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "School",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/stafs")
  async connectStafs(
    @common.Param() params: SchoolWhereUniqueInput,
    @common.Body() body: StafWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stafs: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "School",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/stafs")
  async updateStafs(
    @common.Param() params: SchoolWhereUniqueInput,
    @common.Body() body: StafWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stafs: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "School",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/stafs")
  async disconnectStafs(
    @common.Param() params: SchoolWhereUniqueInput,
    @common.Body() body: StafWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stafs: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/students")
  @ApiNestedQuery(StudentFindManyArgs)
  async findManyStudents(
    @common.Req() request: Request,
    @common.Param() params: SchoolWhereUniqueInput
  ): Promise<Student[]> {
    const query = plainToClass(StudentFindManyArgs, request.query);
    const results = await this.service.findStudents(params.id, {
      ...query,
      select: {
        address: true,
        createdAt: true,
        id: true,
        name: true,

        school: {
          select: {
            id: true,
          },
        },

        status: true,
        studentId: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "School",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/students")
  async connectStudents(
    @common.Param() params: SchoolWhereUniqueInput,
    @common.Body() body: StudentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      students: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "School",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/students")
  async updateStudents(
    @common.Param() params: SchoolWhereUniqueInput,
    @common.Body() body: StudentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      students: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "School",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/students")
  async disconnectStudents(
    @common.Param() params: SchoolWhereUniqueInput,
    @common.Body() body: StudentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      students: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Subscription",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/SubscriptionHistory")
  @ApiNestedQuery(SubscriptionFindManyArgs)
  async findManySubscriptionHistory(
    @common.Req() request: Request,
    @common.Param() params: SchoolWhereUniqueInput
  ): Promise<Subscription[]> {
    const query = plainToClass(SubscriptionFindManyArgs, request.query);
    const results = await this.service.findSubscriptionHistory(params.id, {
      ...query,
      select: {
        amount: true,
        createdAt: true,
        id: true,
        isStanderd: true,
        name: true,
        period: true,

        schoolSubscriptionHistory: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "School",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/SubscriptionHistory")
  async connectSubscriptionHistory(
    @common.Param() params: SchoolWhereUniqueInput,
    @common.Body() body: SubscriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      SubscriptionHistory: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "School",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/SubscriptionHistory")
  async updateSubscriptionHistory(
    @common.Param() params: SchoolWhereUniqueInput,
    @common.Body() body: SubscriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      SubscriptionHistory: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "School",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/SubscriptionHistory")
  async disconnectSubscriptionHistory(
    @common.Param() params: SchoolWhereUniqueInput,
    @common.Body() body: SubscriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      SubscriptionHistory: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
