/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateApprovalArgs } from "./CreateApprovalArgs";
import { UpdateApprovalArgs } from "./UpdateApprovalArgs";
import { DeleteApprovalArgs } from "./DeleteApprovalArgs";
import { ApprovalFindManyArgs } from "./ApprovalFindManyArgs";
import { ApprovalFindUniqueArgs } from "./ApprovalFindUniqueArgs";
import { Approval } from "./Approval";
import { ParentFindManyArgs } from "../../parent/base/ParentFindManyArgs";
import { Parent } from "../../parent/base/Parent";
import { Treatment } from "../../treatment/base/Treatment";
import { Student } from "../../student/base/Student";
import { ApprovalService } from "../approval.service";

@graphql.Resolver(() => Approval)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ApprovalResolverBase {
  constructor(
    protected readonly service: ApprovalService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Approval",
    action: "read",
    possession: "any",
  })
  async _approvalsMeta(
    @graphql.Args() args: ApprovalFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Approval])
  @nestAccessControl.UseRoles({
    resource: "Approval",
    action: "read",
    possession: "any",
  })
  async approvals(
    @graphql.Args() args: ApprovalFindManyArgs
  ): Promise<Approval[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Approval, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Approval",
    action: "read",
    possession: "own",
  })
  async approval(
    @graphql.Args() args: ApprovalFindUniqueArgs
  ): Promise<Approval | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Approval)
  @nestAccessControl.UseRoles({
    resource: "Approval",
    action: "create",
    possession: "any",
  })
  async createApproval(
    @graphql.Args() args: CreateApprovalArgs
  ): Promise<Approval> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        record: {
          connect: args.data.record,
        },

        student: args.data.student
          ? {
              connect: args.data.student,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Approval)
  @nestAccessControl.UseRoles({
    resource: "Approval",
    action: "update",
    possession: "any",
  })
  async updateApproval(
    @graphql.Args() args: UpdateApprovalArgs
  ): Promise<Approval | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          record: {
            connect: args.data.record,
          },

          student: args.data.student
            ? {
                connect: args.data.student,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Approval)
  @nestAccessControl.UseRoles({
    resource: "Approval",
    action: "delete",
    possession: "any",
  })
  async deleteApproval(
    @graphql.Args() args: DeleteApprovalArgs
  ): Promise<Approval | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Parent])
  @nestAccessControl.UseRoles({
    resource: "Parent",
    action: "read",
    possession: "any",
  })
  async approvedBy(
    @graphql.Parent() parent: Approval,
    @graphql.Args() args: ParentFindManyArgs
  ): Promise<Parent[]> {
    const results = await this.service.findApprovedBy(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Treatment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Treatment",
    action: "read",
    possession: "any",
  })
  async record(@graphql.Parent() parent: Approval): Promise<Treatment | null> {
    const result = await this.service.getRecord(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Student, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "read",
    possession: "any",
  })
  async student(@graphql.Parent() parent: Approval): Promise<Student | null> {
    const result = await this.service.getStudent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
