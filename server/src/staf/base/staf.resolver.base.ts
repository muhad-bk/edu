/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateStafArgs } from "./CreateStafArgs";
import { UpdateStafArgs } from "./UpdateStafArgs";
import { DeleteStafArgs } from "./DeleteStafArgs";
import { StafFindManyArgs } from "./StafFindManyArgs";
import { StafFindUniqueArgs } from "./StafFindUniqueArgs";
import { Staf } from "./Staf";
import { ChartVistFindManyArgs } from "../../chartVist/base/ChartVistFindManyArgs";
import { ChartVist } from "../../chartVist/base/ChartVist";
import { SchoolFindManyArgs } from "../../school/base/SchoolFindManyArgs";
import { School } from "../../school/base/School";
import { SchoolDistrict } from "../../schoolDistrict/base/SchoolDistrict";
import { User } from "../../user/base/User";
import { StafService } from "../staf.service";

@graphql.Resolver(() => Staf)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class StafResolverBase {
  constructor(
    protected readonly service: StafService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Staf",
    action: "read",
    possession: "any",
  })
  async _stafsMeta(
    @graphql.Args() args: StafFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Staf])
  @nestAccessControl.UseRoles({
    resource: "Staf",
    action: "read",
    possession: "any",
  })
  async stafs(@graphql.Args() args: StafFindManyArgs): Promise<Staf[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Staf, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Staf",
    action: "read",
    possession: "own",
  })
  async staf(@graphql.Args() args: StafFindUniqueArgs): Promise<Staf | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Staf)
  @nestAccessControl.UseRoles({
    resource: "Staf",
    action: "create",
    possession: "any",
  })
  async createStaf(@graphql.Args() args: CreateStafArgs): Promise<Staf> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        schoolDistricts: args.data.schoolDistricts
          ? {
              connect: args.data.schoolDistricts,
            }
          : undefined,

        user: {
          connect: args.data.user,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Staf)
  @nestAccessControl.UseRoles({
    resource: "Staf",
    action: "update",
    possession: "any",
  })
  async updateStaf(@graphql.Args() args: UpdateStafArgs): Promise<Staf | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          schoolDistricts: args.data.schoolDistricts
            ? {
                connect: args.data.schoolDistricts,
              }
            : undefined,

          user: {
            connect: args.data.user,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Staf)
  @nestAccessControl.UseRoles({
    resource: "Staf",
    action: "delete",
    possession: "any",
  })
  async deleteStaf(@graphql.Args() args: DeleteStafArgs): Promise<Staf | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ChartVist])
  @nestAccessControl.UseRoles({
    resource: "ChartVist",
    action: "read",
    possession: "any",
  })
  async chartVists(
    @graphql.Parent() parent: Staf,
    @graphql.Args() args: ChartVistFindManyArgs
  ): Promise<ChartVist[]> {
    const results = await this.service.findChartVists(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [School])
  @nestAccessControl.UseRoles({
    resource: "School",
    action: "read",
    possession: "any",
  })
  async school(
    @graphql.Parent() parent: Staf,
    @graphql.Args() args: SchoolFindManyArgs
  ): Promise<School[]> {
    const results = await this.service.findSchool(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => SchoolDistrict, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SchoolDistrict",
    action: "read",
    possession: "any",
  })
  async schoolDistricts(
    @graphql.Parent() parent: Staf
  ): Promise<SchoolDistrict | null> {
    const result = await this.service.getSchoolDistricts(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async user(@graphql.Parent() parent: Staf): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
