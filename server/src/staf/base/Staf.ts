/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsOptional,
  ValidateNested,
  IsDate,
  IsEnum,
} from "class-validator";
import { ChartVist } from "../../chartVist/base/ChartVist";
import { Type } from "class-transformer";
import { EnumStafGender } from "./EnumStafGender";
import { Role } from "../../role/base/Role";
import { School } from "../../school/base/School";
import { SchoolDistrict } from "../../schoolDistrict/base/SchoolDistrict";
import { EnumStafStatus } from "./EnumStafStatus";
import { User } from "../../user/base/User";

@ObjectType()
class Staf {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  address!: string | null;

  @ApiProperty({
    required: false,
    type: () => [ChartVist],
  })
  @ValidateNested()
  @Type(() => ChartVist)
  @IsOptional()
  chartVists?: Array<ChartVist>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  contactDetails!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  destignation!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  fullName!: string | null;

  @ApiProperty({
    required: false,
    enum: EnumStafGender,
  })
  @IsEnum(EnumStafGender)
  @IsOptional()
  @Field(() => EnumStafGender, {
    nullable: true,
  })
  gender?: "Male" | "Female" | "NotSpecified" | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  idNumber!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  officialEmail!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  race!: string | null;

  @ApiProperty({
    required: false,
    type: () => Role,
  })
  @ValidateNested()
  @Type(() => Role)
  @IsOptional()
  role?: Role | null;

  @ApiProperty({
    required: false,
    type: () => [School],
  })
  @ValidateNested()
  @Type(() => School)
  @IsOptional()
  school?: Array<School>;

  @ApiProperty({
    required: false,
    type: () => SchoolDistrict,
  })
  @ValidateNested()
  @Type(() => SchoolDistrict)
  @IsOptional()
  schoolDistricts?: SchoolDistrict | null;

  @ApiProperty({
    required: false,
    enum: EnumStafStatus,
  })
  @IsEnum(EnumStafStatus)
  @IsOptional()
  @Field(() => EnumStafStatus, {
    nullable: true,
  })
  status?: "Active" | "Deactivate" | "Pending" | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: true,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  user?: User;
}

export { Staf };
