/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateParentArgs } from "./CreateParentArgs";
import { UpdateParentArgs } from "./UpdateParentArgs";
import { DeleteParentArgs } from "./DeleteParentArgs";
import { ParentFindManyArgs } from "./ParentFindManyArgs";
import { ParentFindUniqueArgs } from "./ParentFindUniqueArgs";
import { Parent } from "./Parent";
import { ApprovalFindManyArgs } from "../../approval/base/ApprovalFindManyArgs";
import { Approval } from "../../approval/base/Approval";
import { SchoolFindManyArgs } from "../../school/base/SchoolFindManyArgs";
import { School } from "../../school/base/School";
import { StudentFindManyArgs } from "../../student/base/StudentFindManyArgs";
import { Student } from "../../student/base/Student";
import { User } from "../../user/base/User";
import { ParentService } from "../parent.service";

@graphql.Resolver(() => Parent)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ParentResolverBase {
  constructor(
    protected readonly service: ParentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Parent",
    action: "read",
    possession: "any",
  })
  async _parentsMeta(
    @graphql.Args() args: ParentFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Parent])
  @nestAccessControl.UseRoles({
    resource: "Parent",
    action: "read",
    possession: "any",
  })
  async parents(@graphql.Args() args: ParentFindManyArgs): Promise<Parent[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Parent, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Parent",
    action: "read",
    possession: "own",
  })
  async parent(
    @graphql.Args() args: ParentFindUniqueArgs
  ): Promise<Parent | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Parent)
  @nestAccessControl.UseRoles({
    resource: "Parent",
    action: "create",
    possession: "any",
  })
  async createParent(@graphql.Args() args: CreateParentArgs): Promise<Parent> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Parent)
  @nestAccessControl.UseRoles({
    resource: "Parent",
    action: "update",
    possession: "any",
  })
  async updateParent(
    @graphql.Args() args: UpdateParentArgs
  ): Promise<Parent | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Parent)
  @nestAccessControl.UseRoles({
    resource: "Parent",
    action: "delete",
    possession: "any",
  })
  async deleteParent(
    @graphql.Args() args: DeleteParentArgs
  ): Promise<Parent | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Approval])
  @nestAccessControl.UseRoles({
    resource: "Approval",
    action: "read",
    possession: "any",
  })
  async approvals(
    @graphql.Parent() parent: Parent,
    @graphql.Args() args: ApprovalFindManyArgs
  ): Promise<Approval[]> {
    const results = await this.service.findApprovals(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [School])
  @nestAccessControl.UseRoles({
    resource: "School",
    action: "read",
    possession: "any",
  })
  async schools(
    @graphql.Parent() parent: Parent,
    @graphql.Args() args: SchoolFindManyArgs
  ): Promise<School[]> {
    const results = await this.service.findSchools(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Student])
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "read",
    possession: "any",
  })
  async students(
    @graphql.Parent() parent: Parent,
    @graphql.Args() args: StudentFindManyArgs
  ): Promise<Student[]> {
    const results = await this.service.findStudents(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async user(@graphql.Parent() parent: Parent): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
