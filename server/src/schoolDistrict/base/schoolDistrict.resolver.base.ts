/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateSchoolDistrictArgs } from "./CreateSchoolDistrictArgs";
import { UpdateSchoolDistrictArgs } from "./UpdateSchoolDistrictArgs";
import { DeleteSchoolDistrictArgs } from "./DeleteSchoolDistrictArgs";
import { SchoolDistrictFindManyArgs } from "./SchoolDistrictFindManyArgs";
import { SchoolDistrictFindUniqueArgs } from "./SchoolDistrictFindUniqueArgs";
import { SchoolDistrict } from "./SchoolDistrict";
import { RoleFindManyArgs } from "../../role/base/RoleFindManyArgs";
import { Role } from "../../role/base/Role";
import { SchoolFindManyArgs } from "../../school/base/SchoolFindManyArgs";
import { School } from "../../school/base/School";
import { StafFindManyArgs } from "../../staf/base/StafFindManyArgs";
import { Staf } from "../../staf/base/Staf";
import { Subscription } from "../../subscription/base/Subscription";
import { SchoolDistrictService } from "../schoolDistrict.service";

@graphql.Resolver(() => SchoolDistrict)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class SchoolDistrictResolverBase {
  constructor(
    protected readonly service: SchoolDistrictService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SchoolDistrict",
    action: "read",
    possession: "any",
  })
  async _schoolDistrictsMeta(
    @graphql.Args() args: SchoolDistrictFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SchoolDistrict])
  @nestAccessControl.UseRoles({
    resource: "SchoolDistrict",
    action: "read",
    possession: "any",
  })
  async schoolDistricts(
    @graphql.Args() args: SchoolDistrictFindManyArgs
  ): Promise<SchoolDistrict[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SchoolDistrict, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SchoolDistrict",
    action: "read",
    possession: "own",
  })
  async schoolDistrict(
    @graphql.Args() args: SchoolDistrictFindUniqueArgs
  ): Promise<SchoolDistrict | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SchoolDistrict)
  @nestAccessControl.UseRoles({
    resource: "SchoolDistrict",
    action: "create",
    possession: "any",
  })
  async createSchoolDistrict(
    @graphql.Args() args: CreateSchoolDistrictArgs
  ): Promise<SchoolDistrict> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        subscription: args.data.subscription
          ? {
              connect: args.data.subscription,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SchoolDistrict)
  @nestAccessControl.UseRoles({
    resource: "SchoolDistrict",
    action: "update",
    possession: "any",
  })
  async updateSchoolDistrict(
    @graphql.Args() args: UpdateSchoolDistrictArgs
  ): Promise<SchoolDistrict | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          subscription: args.data.subscription
            ? {
                connect: args.data.subscription,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SchoolDistrict)
  @nestAccessControl.UseRoles({
    resource: "SchoolDistrict",
    action: "delete",
    possession: "any",
  })
  async deleteSchoolDistrict(
    @graphql.Args() args: DeleteSchoolDistrictArgs
  ): Promise<SchoolDistrict | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Role])
  @nestAccessControl.UseRoles({
    resource: "Role",
    action: "read",
    possession: "any",
  })
  async roles(
    @graphql.Parent() parent: SchoolDistrict,
    @graphql.Args() args: RoleFindManyArgs
  ): Promise<Role[]> {
    const results = await this.service.findRoles(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [School])
  @nestAccessControl.UseRoles({
    resource: "School",
    action: "read",
    possession: "any",
  })
  async schools(
    @graphql.Parent() parent: SchoolDistrict,
    @graphql.Args() args: SchoolFindManyArgs
  ): Promise<School[]> {
    const results = await this.service.findSchools(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Staf])
  @nestAccessControl.UseRoles({
    resource: "Staf",
    action: "read",
    possession: "any",
  })
  async stafs(
    @graphql.Parent() parent: SchoolDistrict,
    @graphql.Args() args: StafFindManyArgs
  ): Promise<Staf[]> {
    const results = await this.service.findStafs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Subscription, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Subscription",
    action: "read",
    possession: "any",
  })
  async subscription(
    @graphql.Parent() parent: SchoolDistrict
  ): Promise<Subscription | null> {
    const result = await this.service.getSubscription(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
